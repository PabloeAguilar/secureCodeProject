@page "/login"
@rendermode InteractiveServer
@inject AuthService AuthService
@inject AuthStateService AuthStateService
@inject NavigationManager Navigation

<h3>Iniciar Sesión</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="login">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="username" class="form-label">Usuario</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Contraseña</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;

    protected override void OnInitialized()
    {
        // Si ya está autenticado, redirige a "/"
        if (AuthStateService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;
        var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
        if (result)
        {
            AuthStateService.SetAuthenticated(loginModel.Username);
            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Usuario o contraseña incorrectos.";
        }
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
