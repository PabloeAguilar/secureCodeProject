@page "/register"
@rendermode InteractiveServer

<PageTitle>New User</PageTitle>

<!-- webform.html -->

@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Registro de Usuario</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

<EditForm FormName="registerForm" OnInvalidSubmit="onInvalid" Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
    </div>
    <div class="mb-3">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
    </div>
    <div class="mb-3">
        <label for="role">Role:</label>
        <InputSelect id="role" class="form-control" @bind-Value="registerModel.Role">
            <option value="User">User</option>
            <option value="admin">admin</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string? ErrorMessage;
    private string? SuccessMessage;

    private void onInvalid() {
        Console.WriteLine("OnInvalid");
    }
    private async Task HandleRegister()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5016/user/submit", registerModel);
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Usuario registrado correctamente. Redirigiendo a login...";
                await Task.Delay(1200);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error al registrar: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error inesperado: {ex.Message}";
        }
    }

    public class RegisterModel
    {
        [Required (ErrorMessage = "USERNAME is REQUIRED")]
        public string Username { get; set; } = string.Empty;
        [Required (ErrorMessage = "EMAIL is REQUIRED")]
        [EmailAddress (ErrorMessage = "EMAIL is NOT VALID")]
        public string Email { get; set; } = string.Empty;
        [Required (ErrorMessage = "PASSWORD is REQUIRED")]
        [StringLength (50, MinimumLength = 8, ErrorMessage = "PASSWORD MUST be between 8 and 50 characters")]
        public string Password { get; set; } = string.Empty;
        [Required]
        public string Role { get; set; } = "User";
    }
}

